import{_ as s,o as i,c as a,R as e}from"./chunks/framework.aAb_t1_d.js";const u=JSON.parse('{"title":"写在最前面","description":"","frontmatter":{"title":"写在最前面"},"headers":[],"relativePath":"sourceCode/vue2SourceCode/start/index.md","filePath":"sourceCode/vue2SourceCode/start/index.md"}'),n={name:"sourceCode/vue2SourceCode/start/index.md"},l=e(`<h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>博主作为一名前端开发，日常开发的技术栈是<code>Vue</code>，并且用<code>Vue</code>开发也有一年多了，对其用法也较为熟练了，但是对各种用法和各种<code>api</code>使用都是只知其然而不知其所以然，因此，有时候在排查<code>bug</code>的时候就会有点捉襟见肘。鉴于此，索性就从<code>github</code>上<code>clone</code>下来一份<code>Vue</code>源码来学习学习，本系列博文将用来记录博主对<code>Vue</code>源码的整个学习过程，以及自己对源码的一些理解。一方面开阔自己的知识视野，另一方面也希望这些文字能够带给他人些许帮助。</p><h2 id="_2-学习规划" tabindex="-1">2. 学习规划 <a class="header-anchor" href="#_2-学习规划" aria-label="Permalink to &quot;2. 学习规划&quot;">​</a></h2><h3 id="_2-1-源码学习目录" tabindex="-1">2.1 源码学习目录 <a class="header-anchor" href="#_2-1-源码学习目录" aria-label="Permalink to &quot;2.1 源码学习目录&quot;">​</a></h3><p>本项目所剖析的<code>Vue.js</code>源码版本是目前最新的版本，版本号为 v2.6.11 ，其代码目录如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├─dist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # 项目构建后的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├─scripts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 与项目构建相关的脚本和配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├─flow</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # flow的类型声明文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├─src</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # 项目源代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├─complier</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 与模板编译相关的代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├─core</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 通用的、与运行平台无关的运行时代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├─observe</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 实现变化侦测的代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├─vdom</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 实现virtual dom的代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├─instance</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # Vue.js实例的构造函数和原型方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├─global-api</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 全局api的代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └─components</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 内置组件的代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├─server</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 与服务端渲染相关的代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├─platforms</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 特定运行平台的代码，如weex</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├─sfc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 单文件组件的解析代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    └─shared</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 项目公用的工具代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└─test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # 项目测试代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>从上面的目录结构可以看出，<code>Vue</code>的整个项目包含了类型检测相关、单元测试相关、与平台无关的核心代码以及跨平台运行的相关代码。</p><p>由于我们只是学习<code>Vue.js</code>的设计思想以及代码实现的相关逻辑，所以我们暂不去关心类型检测、单元测试以及特定平台运行等相关逻辑实现，仅关注它的核心代码，即<code>src/core</code>和<code>src/complier</code>这两个目录下的代码，并且接下来后续的学习也都是只在这两个目录的范围之内。</p><h3 id="_2-2-学习路线" tabindex="-1">2.2 学习路线 <a class="header-anchor" href="#_2-2-学习路线" aria-label="Permalink to &quot;2.2 学习路线&quot;">​</a></h3><p>在学习之前，我们需要先制定一个学习路线，循序渐进的学习，这样不至于一头雾水，无处下手。后面的学习路线如下：</p><ol><li><p>变化侦测篇</p><p>学习<code>Vue</code>中如何实现数据的响应式系统，从而达到数据驱动视图。</p></li><li><p>虚拟 DOM 篇</p><p>学习什么是虚拟 DOM，以及<code>Vue</code>中的<code>DOM-Diff</code>原理</p></li><li><p>模板编译篇</p><p>学习<code>Vue</code>内部是怎么把<code>template</code>模板编译成虚拟<code>DOM</code>,从而渲染出真实<code>DOM</code></p></li><li><p>实例方法篇</p><p>学习<code>Vue</code>中所有实例方法(即所有以<code>$</code>开头的方法)的实现原理</p></li><li><p>全局 API 篇</p><p>学习<code>Vue</code>中所有全局<code>API</code>的实现原理</p></li><li><p>生命周期篇</p><p>学习<code>Vue</code>中组件的生命周期实现原理</p></li><li><p>指令篇</p><p>学习<code>Vue</code>中所有指令的实现原理</p></li><li><p>过滤器篇</p><p>学习<code>Vue</code>中所有过滤器的实现原理</p></li><li><p>内置组件篇</p><p>学习<code>Vue</code>中内置组件的实现原理</p></li></ol><h3 id="_2-3-学习输出" tabindex="-1">2.3 学习输出 <a class="header-anchor" href="#_2-3-学习输出" aria-label="Permalink to &quot;2.3 学习输出&quot;">​</a></h3><p>通过一步步的学习，博主打算在学习过程中输出以下三个东西：</p><ul><li>以文字形式记录学习过程；</li><li>为<code>clone</code>下来的<code>Vue</code>源码添加尽可能详细的注释；</li><li>做一份思维导图，以宏观角度总览源码；</li></ul><h2 id="_3-那就开始吧" tabindex="-1">3. 那就开始吧 <a class="header-anchor" href="#_3-那就开始吧" aria-label="Permalink to &quot;3. 那就开始吧&quot;">​</a></h2><p>写作是一件十分枯燥的事情，如果我写的这些文字对你有些许帮助的话，还请赏个 star 哈~~</p>`,16),p=[l];function h(t,d,r,k,c,o){return i(),a("div",null,p)}const g=s(n,[["render",h]]);export{u as __pageData,g as default};
