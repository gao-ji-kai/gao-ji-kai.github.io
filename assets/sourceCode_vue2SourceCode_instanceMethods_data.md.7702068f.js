import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.fd95ed2e.js";const l="/assets/1.abd2ce29.jpg",F=JSON.parse('{"title":"数据相关的方法","description":"","frontmatter":{"title":"数据相关的方法"},"headers":[],"relativePath":"sourceCode/vue2SourceCode/instanceMethods/data.md","filePath":"sourceCode/vue2SourceCode/instanceMethods/data.md"}'),e={name:"sourceCode/vue2SourceCode/instanceMethods/data.md"},o=p(`<h2 id="_0-前言" tabindex="-1">0. 前言 <a class="header-anchor" href="#_0-前言" aria-label="Permalink to &quot;0. 前言&quot;">​</a></h2><p>与数据相关的实例方法有 3 个，分别是<code>vm.$set</code>、<code>vm.$delete</code>和<code>vm.$watch</code>。它们是在<code>stateMixin</code>函数中挂载到<code>Vue</code>原型上的，代码如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { set, del } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;../observer/index&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stateMixin</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">Vue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$delete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> del;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">expOrFn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { set, del } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;../observer/index&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stateMixin</span><span style="color:#24292E;">(</span><span style="color:#E36209;">Vue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> set;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$delete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> del;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">expOrFn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cb</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当执行<code>stateMixin</code>函数后，会向<code>Vue</code>原型上挂载上述 3 个实例方法。</p><p>接下来，我们就来分析这 3 个与数据相关的实例方法其内部的原理都是怎样的。</p><h2 id="_1-vm-watch" tabindex="-1">1. vm.$watch <a class="header-anchor" href="#_1-vm-watch" aria-label="Permalink to &quot;1. vm.\\$watch&quot;">​</a></h2><h3 id="_1-1-用法回顾" tabindex="-1">1.1 用法回顾 <a class="header-anchor" href="#_1-1-用法回顾" aria-label="Permalink to &quot;1.1 用法回顾&quot;">​</a></h3><p>在介绍方法的内部原理之前，我们先根据官方文档示例回顾一下它的用法。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(expOrFn, callback, [options]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(expOrFn, callback, [options]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><strong>参数</strong>：</p><ul><li><code>{string | Function} expOrFn</code></li><li><code>{Function | Object} callback</code></li><li><code>{Object} [options]</code><ul><li><code>{boolean} deep</code></li><li><code>{boolean} immediate</code></li></ul></li></ul></li><li><p><strong>返回值</strong>：<code>{Function} unwatch</code></p></li><li><p><strong>用法</strong>：</p><p>观察 <code>Vue</code> 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。</p><p>注意：在变异 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象/数组。<code>Vue</code> 不会保留变异之前值的副本。</p></li><li><p><strong>示例</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 键路径</span></span>
<span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a.b.c&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 做点什么</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 表达式 \`this.a + this.b\` 每次得出一个不同的结果时</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理函数都会被调用。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这就像监听一个未被定义的计算属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.b;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 做点什么</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 键路径</span></span>
<span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.b.c&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 做点什么</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数</span></span>
<span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 表达式 \`this.a + this.b\` 每次得出一个不同的结果时</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理函数都会被调用。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这就像监听一个未被定义的计算属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.b;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 做点什么</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>vm.$watch</code> 返回一个取消观察函数，用来停止触发回调：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> unwatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, cb);</span></span>
<span class="line"><span style="color:#6A737D;">// 之后取消观察</span></span>
<span class="line"><span style="color:#B392F0;">unwatch</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> unwatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, cb);</span></span>
<span class="line"><span style="color:#6A737D;">// 之后取消观察</span></span>
<span class="line"><span style="color:#6F42C1;">unwatch</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>选项：deep</strong></p><p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code> 。注意监听数组的变动不需要这么做。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;someObject&quot;</span><span style="color:#E1E4E8;">, callback, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  deep: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">vm.someObject.nestedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// callback is fired</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;someObject&quot;</span><span style="color:#24292E;">, callback, {</span></span>
<span class="line"><span style="color:#24292E;">  deep: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">vm.someObject.nestedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// callback is fired</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>选项：immediate</strong></p><p>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, callback, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  immediate: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 立即以 \`a\` 的当前值触发回调</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, callback, {</span></span>
<span class="line"><span style="color:#24292E;">  immediate: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 立即以 \`a\` 的当前值触发回调</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意在带有 <code>immediate</code> 选项时，你不能在第一次回调时取消侦听给定的 property。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 这会导致报错</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> unwatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doSomething</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">unwatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { immediate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 这会导致报错</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> unwatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">unwatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  { immediate: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果你仍然希望在回调内部调用一个取消侦听的函数，你应该先检查其函数的可用性：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> unwatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doSomething</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (unwatch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">unwatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { immediate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> unwatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (unwatch) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">unwatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  { immediate: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="_1-2-内部原理" tabindex="-1">1.2 内部原理 <a class="header-anchor" href="#_1-2-内部原理" aria-label="Permalink to &quot;1.2 内部原理&quot;">​</a></h3><p><code>$watch</code>的定义位于源码的<code>src/core/instance/state.js</code>中，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">expOrFn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isPlainObject</span><span style="color:#E1E4E8;">(cb)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createWatcher</span><span style="color:#E1E4E8;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  options.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">watcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.immediate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    cb.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(vm, watcher.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unwatchFn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    watcher.</span><span style="color:#B392F0;">teardown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">expOrFn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cb</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isPlainObject</span><span style="color:#24292E;">(cb)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createWatcher</span><span style="color:#24292E;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  options.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">watcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.immediate) {</span></span>
<span class="line"><span style="color:#24292E;">    cb.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(vm, watcher.value);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unwatchFn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    watcher.</span><span style="color:#6F42C1;">teardown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>可以看到，<code>$watch</code>方法的代码并不多，逻辑也不是很复杂。</p><p>在函数内部，首先判断传入的回调函数是否为一个对象，就像下面这种形式：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a.b.c&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  deep: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.b.c&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* ... */</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  deep: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果传入的回调函数是个对象，那就表明用户是把第二个参数回调函数<code>cb</code>和第三个参数选项<code>options</code>合起来传入的，此时调用<code>createWatcher</code>函数，该函数定义如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createWatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vm</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">expOrFn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isPlainObject</span><span style="color:#E1E4E8;">(handler)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler.handler;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> handler </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm[handler];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(expOrFn, handler, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createWatcher</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vm</span><span style="color:#24292E;">, </span><span style="color:#E36209;">expOrFn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isPlainObject</span><span style="color:#24292E;">(handler)) {</span></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler;</span></span>
<span class="line"><span style="color:#24292E;">    handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler.handler;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm[handler];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(expOrFn, handler, options);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以看到，该函数内部其实就是从用户合起来传入的对象中把回调函数<code>cb</code>和参数<code>options</code>剥离出来，然后再以常规的方式调用<code>$watch</code>方法并将剥离出来的参数穿进去。</p><p>接着获取到用户传入的<code>options</code>，如果用户没有传入则将其赋值为一个默认空对象，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>$watch</code>方法内部会创建一个<code>watcher</code>实例，由于该实例是用户手动调用<code>$watch</code>方法创建而来的，所以给<code>options</code>添加<code>user</code>属性并赋值为<code>true</code>，用于区分用户创建的<code>watcher</code>实例和<code>Vue</code>内部创建的<code>watcher</code>实例，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">options.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">options.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接着，传入参数创建一个<code>watcher</code>实例，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">watcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;">(vm, expOrFn, cb, options);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">watcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;">(vm, expOrFn, cb, options);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接着判断如果用户在选项参数<code>options</code>中指定的<code>immediate</code>为<code>true</code>，则立即用被观察数据当前的值触发回调，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.immediate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  cb.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(vm, watcher.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.immediate) {</span></span>
<span class="line"><span style="color:#24292E;">  cb.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(vm, watcher.value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>最后返回一个取消观察函数<code>unwatchFn</code>，用来停止触发回调。如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unwatchFn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  watcher.</span><span style="color:#B392F0;">teardown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unwatchFn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  watcher.</span><span style="color:#6F42C1;">teardown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个取消观察函数<code>unwatchFn</code>内部其实是调用了<code>watcher</code>实例的<code>teardown</code>方法，那么我们来看一下这个<code>teardown</code>方法是如何实现的。其代码如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">teardown</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deps.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deps[i].</span><span style="color:#B392F0;">removeSub</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">teardown</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deps.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deps[i].</span><span style="color:#6F42C1;">removeSub</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在之前介绍变化侦测篇的文章中我们说过，谁读取了数据，就表示谁依赖了这个数据，那么谁就会存在于这个数据的依赖列表中，当这个数据变化时，就会通知谁。也就是说，如果谁不想依赖这个数据了，那么只需从这个数据的依赖列表中把谁删掉即可。</p><p>在上面代码中，创建<code>watcher</code>实例的时候会读取被观察的数据，读取了数据就表示依赖了数据，所以<code>watcher</code>实例就会存在于数据的依赖列表中，同时<code>watcher</code>实例也记录了自己依赖了哪些数据，另外我们还说过，每个数据都有一个自己的依赖管理器<code>dep</code>，<code>watcher</code>实例记录自己依赖了哪些数据其实就是把这些数据的依赖管理器<code>dep</code>存放在<code>watcher</code>实例的<code>this.deps = []</code>属性中，当取消观察时即<code>watcher</code>实例不想依赖这些数据了，那么就遍历自己记录的这些数据的依赖管理器，告诉这些数据可以从你们的依赖列表中把我删除了。</p><p>举个例子：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.b;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 做点什么</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.b;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 做点什么</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>例如上面<code>watcher</code>实例，它观察了数据<code>a</code>和数据<code>b</code>，那么它就依赖了数据<code>a</code>和数据<code>b</code>，那么这个<code>watcher</code>实例就存在于数据<code>a</code>和数据<code>b</code>的依赖管理器<code>depA</code>和<code>depB</code>中，同时<code>watcher</code>实例的<code>deps</code>属性中也记录了这两个依赖管理器，即<code>this.deps=[depA,depB]</code>，</p><p>当取消观察时，就遍历<code>this.deps</code>，让每个依赖管理器调用其<code>removeSub</code>方法将这个<code>watcher</code>实例从自己的依赖列表中删除。</p><p>下面还有最后一个问题，当选项参数<code>options</code>中的<code>deep</code>属性为<code>true</code>时，如何实现深度观察呢？</p><p>首先我们来看看什么是深度观察，假如有如下被观察的数据：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  a: </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  a: </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所谓深度观察，就是当<code>obj</code>对象发生变化时我们会得到通知，通知当<code>obj.a</code>属性发生变化时我们也要能得到通知，简单的说就是观察对象内部值的变化。</p><p>要实现这个功能也不难，我们知道，要想让数据变化时通知我们，那我们只需成为这个数据的依赖即可，因为数据变化时会通知它所有的依赖，那么如何成为数据的依赖呢，很简单，读取一下数据即可。也就是说我们只需在创建<code>watcher</code>实例的时候把<code>obj</code>对象内部所有的值都递归的读一遍，那么这个<code>watcher</code>实例就会被加入到对象内所有值的依赖列表中，之后当对象内任意某个值发生变化时就能够得到通知了。</p><p>有了初步的思想后，接下来我们看看代码中是如何实现的。我们知道，在创建<code>watcher</code>实例的时候，会执行<code>Watcher</code>类中<code>get</code>方法来读取一下被观察的数据，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;touch&quot; every property so they are all tracked as</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// dependencies for deep watching</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deep) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;touch&quot; every property so they are all tracked as</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// dependencies for deep watching</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deep) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>可以看到，在<code>get</code>方法中，如果传入的<code>deep</code>为<code>true</code>，则会调用<code>traverse</code>函数，并且在源码中，对于这一步操作有个很形象的注释：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&quot;touch&quot; every property so they are all tracked as dependencies for deep watching</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">“触摸”每个属性，以便将它们全部作为深度监视的依赖项进行跟踪</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&quot;touch&quot; every property so they are all tracked as dependencies for deep watching</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">“触摸”每个属性，以便将它们全部作为深度监视的依赖项进行跟踪</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所谓“触摸”每个属性，不就是将每个属性都读取一遍么？哈哈</p><p>回到代码，<code>traverse</code>函数定义如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">seenObjects</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">_traverse</span><span style="color:#E1E4E8;">(val, seenObjects);</span></span>
<span class="line"><span style="color:#E1E4E8;">  seenObjects.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_traverse</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">seen</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleSet</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i, keys;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isA</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isA </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(val)) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">isFrozen</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    val </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (val.__ob__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">depId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val.__ob__.dep.id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (seen.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(depId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    seen.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(depId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isA) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">_traverse</span><span style="color:#E1E4E8;">(val[i], seen);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keys.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">_traverse</span><span style="color:#E1E4E8;">(val[keys[i]], seen);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">seenObjects</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">_traverse</span><span style="color:#24292E;">(val, seenObjects);</span></span>
<span class="line"><span style="color:#24292E;">  seenObjects.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_traverse</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#E36209;">seen</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleSet</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i, keys;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isA</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isA </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isObject</span><span style="color:#24292E;">(val)) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">isFrozen</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    val </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (val.__ob__) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">depId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val.__ob__.dep.id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (seen.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(depId)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    seen.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(depId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isA) {</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">_traverse</span><span style="color:#24292E;">(val[i], seen);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keys.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">_traverse</span><span style="color:#24292E;">(val[keys[i]], seen);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>可以看到，该函数其实就是个递归遍历的过程，把被观察数据的内部值都递归遍历读取一遍。</p><p>首先先判断传入的<code>val</code>类型，如果它不是<code>Array</code>或<code>object</code>，再或者已经被冻结，那么直接返回，退出程序。如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isA</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isA </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(val)) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">isFrozen</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isA</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isA </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isObject</span><span style="color:#24292E;">(val)) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">isFrozen</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后拿到<code>val</code>的<code>dep.id</code>，存入创建好的集合<code>seen</code>中，因为集合相比数据而言它有天然的去重效果，以此来保证存入的<code>dep.id</code>没有重复，不会造成重复收集依赖，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (val.__ob__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">depId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val.__ob__.dep.id;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (seen.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(depId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  seen.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(depId);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (val.__ob__) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">depId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val.__ob__.dep.id;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (seen.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(depId)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  seen.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(depId);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>接下来判断如果是数组，则循环数组，将数组中每一项递归调用<code>_traverse</code>；如果是对象，则取出对象所有的<code>key</code>，然后执行读取操作，再递归内部值，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isA) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">_traverse</span><span style="color:#E1E4E8;">(val[i], seen);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">  i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keys.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">_traverse</span><span style="color:#E1E4E8;">(val[keys[i]], seen);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isA) {</span></span>
<span class="line"><span style="color:#24292E;">  i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">_traverse</span><span style="color:#24292E;">(val[i], seen);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">  i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keys.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">_traverse</span><span style="color:#24292E;">(val[keys[i]], seen);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样，把被观察数据内部所有的值都递归的读取一遍后，那么这个<code>watcher</code>实例就会被加入到对象内所有值的依赖列表中，之后当对象内任意某个值发生变化时就能够得到通知了。</p><h2 id="_2-vm-set" tabindex="-1">2. vm.$set <a class="header-anchor" href="#_2-vm-set" aria-label="Permalink to &quot;2. vm.\\$set&quot;">​</a></h2><p><code>vm.$set</code> 是全局 <code>Vue.set</code> 的<strong>别名</strong>，其用法相同。</p><h3 id="_2-1-用法回顾" tabindex="-1">2.1 用法回顾 <a class="header-anchor" href="#_2-1-用法回顾" aria-label="Permalink to &quot;2.1 用法回顾&quot;">​</a></h3><p>在介绍方法的内部原理之前，我们先根据官方文档示例回顾一下它的用法。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$set</span><span style="color:#E1E4E8;">(target, propertyName </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> index, value);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$set</span><span style="color:#24292E;">(target, propertyName </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> index, value);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><strong>参数</strong>：</p><ul><li><code>{Object | Array} target</code></li><li><code>{string | number} propertyName/index</code></li><li><code>{any} value</code></li></ul></li><li><p><strong>返回值</strong>：设置的值。</p></li><li><p><strong>用法</strong>：</p><p>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 <code>Vue</code> 无法探测普通的新增属性 (比如 <code>this.myObject.newProperty = &#39;hi&#39;</code>)</p></li><li><p><strong>注意</strong>：对象不能是 <code>Vue</code> 实例，或者 <code>Vue</code> 实例的根数据对象。</p></li></ul><h3 id="_2-2-内部原理" tabindex="-1">2.2 内部原理 <a class="header-anchor" href="#_2-2-内部原理" aria-label="Permalink to &quot;2.2 内部原理&quot;">​</a></h3><p>还记得我们在介绍数据变化侦测的时候说过，对于<code>object</code>型数据，当我们向<code>object</code>数据里添加一对新的<code>key/value</code>或删除一对已有的<code>key/value</code>时，<code>Vue</code>是无法观测到的；而对于<code>Array</code>型数据，当我们通过数组下标修改数组中的数据时，<code>Vue</code>也是是无法观测到的；</p><p>正是因为存在这个问题，所以<code>Vue</code>设计了<code>set</code>和<code>delete</code>这两个方法来解决这一问题，下面我们就先来看看<code>set</code>方法的内部实现原理。</p><p><code>set</code>方法的定义位于源码的<code>src/core/observer/index.js</code>中，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(target) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPrimitive</span><span style="color:#E1E4E8;">(target))</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">\`Cannot set reactive property on undefined, null, or primitive value: \${</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">target</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">any</span><span style="color:#9ECBFF;">)}\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    );</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  if (Array.isArray(</span><span style="color:#79B8FF;">target</span><span style="color:#9ECBFF;">) &amp;&amp; isValidArrayIndex(</span><span style="color:#79B8FF;">key</span><span style="color:#9ECBFF;">)) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    target.</span><span style="color:#E1E4E8;">length</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">Math</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">max</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">target</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">length</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">);</span></span>
<span class="line"><span style="color:#9ECBFF;">    target.splice(</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">, </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">, val);</span></span>
<span class="line"><span style="color:#9ECBFF;">    return val;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  </span><span style="color:#B392F0;">if</span><span style="color:#9ECBFF;"> (</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">in</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">target</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">!</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">in</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#9ECBFF;">)) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    target[</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">] = val;</span></span>
<span class="line"><span style="color:#9ECBFF;">    return val;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  const ob = (target: </span><span style="color:#E1E4E8;">any</span><span style="color:#9ECBFF;">).</span><span style="color:#E1E4E8;">__ob__</span><span style="color:#9ECBFF;">;</span></span>
<span class="line"><span style="color:#9ECBFF;">  </span><span style="color:#B392F0;">if</span><span style="color:#9ECBFF;"> (</span><span style="color:#E1E4E8;">target</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">_isVue</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> (</span><span style="color:#E1E4E8;">ob</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">ob</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">vmCount</span><span style="color:#9ECBFF;">)) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#9ECBFF;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#9ECBFF;">      warn(</span></span>
<span class="line"><span style="color:#9ECBFF;">        </span><span style="color:#9ECBFF;">&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span><span style="color:#9ECBFF;"> +</span></span>
<span class="line"><span style="color:#9ECBFF;">          </span><span style="color:#9ECBFF;">&quot;at runtime - declare it upfront in the data option.&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">      );</span></span>
<span class="line"><span style="color:#9ECBFF;">    return val;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  if (!ob) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    target[key] = val;</span></span>
<span class="line"><span style="color:#9ECBFF;">    return val;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  defineReactive(ob.value, key, val);</span></span>
<span class="line"><span style="color:#9ECBFF;">  ob.dep.notify();</span></span>
<span class="line"><span style="color:#9ECBFF;">  return val;</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(target) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPrimitive</span><span style="color:#24292E;">(target))</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">\`Cannot set reactive property on undefined, null, or primitive value: \${</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">target</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">any</span><span style="color:#032F62;">)}\`</span></span>
<span class="line"><span style="color:#032F62;">    );</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  if (Array.isArray(</span><span style="color:#005CC5;">target</span><span style="color:#032F62;">) &amp;&amp; isValidArrayIndex(</span><span style="color:#005CC5;">key</span><span style="color:#032F62;">)) {</span></span>
<span class="line"><span style="color:#032F62;">    target.</span><span style="color:#24292E;">length</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> </span><span style="color:#24292E;">Math</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">max</span><span style="color:#032F62;">(</span><span style="color:#24292E;">target</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">length</span><span style="color:#032F62;">, </span><span style="color:#24292E;">key</span><span style="color:#032F62;">);</span></span>
<span class="line"><span style="color:#032F62;">    target.splice(</span><span style="color:#24292E;">key</span><span style="color:#032F62;">, </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">, val);</span></span>
<span class="line"><span style="color:#032F62;">    return val;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  </span><span style="color:#6F42C1;">if</span><span style="color:#032F62;"> (</span><span style="color:#24292E;">key</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">in</span><span style="color:#032F62;"> </span><span style="color:#24292E;">target</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">!</span><span style="color:#032F62;">(</span><span style="color:#24292E;">key</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">in</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">Object</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#032F62;">)) {</span></span>
<span class="line"><span style="color:#032F62;">    target[</span><span style="color:#24292E;">key</span><span style="color:#032F62;">] = val;</span></span>
<span class="line"><span style="color:#032F62;">    return val;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  const ob = (target: </span><span style="color:#24292E;">any</span><span style="color:#032F62;">).</span><span style="color:#24292E;">__ob__</span><span style="color:#032F62;">;</span></span>
<span class="line"><span style="color:#032F62;">  </span><span style="color:#6F42C1;">if</span><span style="color:#032F62;"> (</span><span style="color:#24292E;">target</span><span style="color:#032F62;">.</span><span style="color:#24292E;">_isVue</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> (</span><span style="color:#24292E;">ob</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#032F62;"> </span><span style="color:#24292E;">ob</span><span style="color:#032F62;">.</span><span style="color:#24292E;">vmCount</span><span style="color:#032F62;">)) {</span></span>
<span class="line"><span style="color:#032F62;">    p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#032F62;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#032F62;">      warn(</span></span>
<span class="line"><span style="color:#032F62;">        </span><span style="color:#032F62;">&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span><span style="color:#032F62;"> +</span></span>
<span class="line"><span style="color:#032F62;">          </span><span style="color:#032F62;">&quot;at runtime - declare it upfront in the data option.&quot;</span></span>
<span class="line"><span style="color:#032F62;">      );</span></span>
<span class="line"><span style="color:#032F62;">    return val;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  if (!ob) {</span></span>
<span class="line"><span style="color:#032F62;">    target[key] = val;</span></span>
<span class="line"><span style="color:#032F62;">    return val;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  defineReactive(ob.value, key, val);</span></span>
<span class="line"><span style="color:#032F62;">  ob.dep.notify();</span></span>
<span class="line"><span style="color:#032F62;">  return val;</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>可以看到，方法内部的逻辑并不复杂，就是根据不同的情况作出不同的处理。</p><p>首先判断在非生产环境下如果传入的<code>target</code>是否为<code>undefined</code>、<code>null</code>或是原始类型，如果是，则抛出警告，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(target) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPrimitive</span><span style="color:#E1E4E8;">(target))</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`Cannot set reactive property on undefined, null, or primitive value: \${</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">target</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">any</span><span style="color:#9ECBFF;">)}\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  );</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(target) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPrimitive</span><span style="color:#24292E;">(target))</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`Cannot set reactive property on undefined, null, or primitive value: \${</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">target</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">any</span><span style="color:#032F62;">)}\`</span></span>
<span class="line"><span style="color:#032F62;">  );</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>接着判断如果传入的<code>target</code>是数组并且传入的<code>key</code>是有效索引的话，那么就取当前数组长度与<code>key</code>这两者的最大值作为数组的新长度，然后使用数组的<code>splice</code>方法将传入的索引<code>key</code>对应的<code>val</code>值添加进数组。这里注意一点，为什么要用<code>splice</code>方法呢？还记得我们在介绍<code>Array</code>类型数据的变化侦测方式时说过，数组的<code>splice</code>方法已经被我们创建的拦截器重写了，也就是说，当使用<code>splice</code>方法向数组内添加元素时，该元素会自动被变成响应式的。如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(target) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isValidArrayIndex</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  target.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(target.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">, key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  target.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(key, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, val);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(target) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isValidArrayIndex</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">  target.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(target.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, key);</span></span>
<span class="line"><span style="color:#24292E;">  target.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(key, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, val);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果传入的<code>target</code>不是数组，那就当做对象来处理。</p><p>首先判断传入的<code>key</code>是否已经存在于<code>target</code>中，如果存在，表明这次操作不是新增属性，而是对已有的属性进行简单的修改值，那么就只修改属性值即可，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  target[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">  target[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来获取到<code>target</code>的<code>__ob__</code>属性，我们说过，该属性是否为<code>true</code>标志着<code>target</code>是否为响应式对象，接着判断如果<code>tragte</code>是 <code>Vue</code> 实例，或者是 <code>Vue</code> 实例的根数据对象，则抛出警告并退出程序，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">).__ob__;</span></span>
<span class="line"><span style="color:#E1E4E8;">if (target._isVue || (</span><span style="color:#FFAB70;">ob</span><span style="color:#E1E4E8;"> &amp;&amp; ob.vmCount)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    warn(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span><span style="color:#E1E4E8;"> +</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;at runtime - declare it upfront in the data option.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  return val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">).__ob__;</span></span>
<span class="line"><span style="color:#24292E;">if (target._isVue || (</span><span style="color:#E36209;">ob</span><span style="color:#24292E;"> &amp;&amp; ob.vmCount)) {</span></span>
<span class="line"><span style="color:#24292E;">  p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    warn(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span><span style="color:#24292E;"> +</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;at runtime - declare it upfront in the data option.&quot;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  return val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着判断如果<code>ob</code>属性为<code>false</code>，那么表明<code>target</code>不是一个响应式对象，那么我们只需简单给它添加上新的属性，不用将新属性转化成响应式，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ob) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  target[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ob) {</span></span>
<span class="line"><span style="color:#24292E;">  target[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>最后，如果<code>target</code>是对象，并且是响应式，那么就调用<code>defineReactive</code>方法将新属性值添加到<code>target</code>上，<code>defineReactive</code>方会将新属性添加完之后并将其转化成响应式，最后通知依赖更新，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(ob.value, key, val);</span></span>
<span class="line"><span style="color:#E1E4E8;">ob.dep.</span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(ob.value, key, val);</span></span>
<span class="line"><span style="color:#24292E;">ob.dep.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以上，就是<code>set</code>方法的内部原理。其逻辑流程图如下：</p><p><img src="`+l+`" alt=""></p><h2 id="_3-vm-delete" tabindex="-1">3. vm.$delete <a class="header-anchor" href="#_3-vm-delete" aria-label="Permalink to &quot;3. vm.\\$delete&quot;">​</a></h2><p><code>vm.$delete</code> 是全局 <code>Vue.delete</code>的<strong>别名</strong>，其用法相同。</p><h3 id="_3-1-用法回顾" tabindex="-1">3.1 用法回顾 <a class="header-anchor" href="#_3-1-用法回顾" aria-label="Permalink to &quot;3.1 用法回顾&quot;">​</a></h3><p>在介绍方法的内部原理之前，我们先根据官方文档示例回顾一下它的用法。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">$delete</span><span style="color:#E1E4E8;">(target, propertyName </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> index);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">$delete</span><span style="color:#24292E;">(target, propertyName </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> index);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><strong>参数</strong>：</p><ul><li><code>{Object | Array} target</code></li><li><code>{string | number} propertyName/index</code></li></ul><blockquote><p>仅在 2.2.0+ 版本中支持 Array + index 用法。</p></blockquote></li><li><p><strong>用法</strong>：</p><p>删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 <code>Vue</code> 不能检测到属性被删除的限制，但是你应该很少会使用它。</p><blockquote><p>在 2.2.0+ 中同样支持在数组上工作。</p></blockquote></li></ul><ul><li><strong>注意</strong>： 目标对象不能是一个 <code>Vue</code> 实例或 <code>Vue</code> 实例的根数据对象。</li></ul><h3 id="_3-2-内部原理" tabindex="-1">3.2 内部原理 <a class="header-anchor" href="#_3-2-内部原理" aria-label="Permalink to &quot;3.2 内部原理&quot;">​</a></h3><p><code>delete</code>方法是用来解决 <code>Vue</code> 不能检测到属性被删除的限制，该方法的定义位于源码的<code>src/core.observer/index.js</code>中，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">del</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(target) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPrimitive</span><span style="color:#E1E4E8;">(target))</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">\`Cannot delete reactive property on undefined, null, or primitive value: \${</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">target</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">any</span><span style="color:#9ECBFF;">)}\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    );</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  if (Array.isArray(</span><span style="color:#79B8FF;">target</span><span style="color:#9ECBFF;">) &amp;&amp; isValidArrayIndex(</span><span style="color:#79B8FF;">key</span><span style="color:#9ECBFF;">)) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    target.splice(</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">, </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">);</span></span>
<span class="line"><span style="color:#9ECBFF;">    return;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  </span><span style="color:#E1E4E8;">const</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">ob</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> (</span><span style="color:#79B8FF;">target</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">any</span><span style="color:#9ECBFF;">).__ob__;</span></span>
<span class="line"><span style="color:#9ECBFF;">  if (target._isVue || (</span><span style="color:#79B8FF;">ob</span><span style="color:#9ECBFF;"> &amp;&amp; ob.vmCount)) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#9ECBFF;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#9ECBFF;">      warn(</span></span>
<span class="line"><span style="color:#9ECBFF;">        </span><span style="color:#9ECBFF;">&quot;Avoid deleting properties on a Vue instance or its root $data &quot;</span><span style="color:#9ECBFF;"> +</span></span>
<span class="line"><span style="color:#9ECBFF;">          </span><span style="color:#9ECBFF;">&quot;- just set it to null.&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">      );</span></span>
<span class="line"><span style="color:#9ECBFF;">    return;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  if (!hasOwn(target, key)) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    return;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  delete target[key];</span></span>
<span class="line"><span style="color:#9ECBFF;">  if (!ob) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    return;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">  ob.dep.notify();</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">del</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(target) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPrimitive</span><span style="color:#24292E;">(target))</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">\`Cannot delete reactive property on undefined, null, or primitive value: \${</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">target</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">any</span><span style="color:#032F62;">)}\`</span></span>
<span class="line"><span style="color:#032F62;">    );</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  if (Array.isArray(</span><span style="color:#005CC5;">target</span><span style="color:#032F62;">) &amp;&amp; isValidArrayIndex(</span><span style="color:#005CC5;">key</span><span style="color:#032F62;">)) {</span></span>
<span class="line"><span style="color:#032F62;">    target.splice(</span><span style="color:#24292E;">key</span><span style="color:#032F62;">, </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">);</span></span>
<span class="line"><span style="color:#032F62;">    return;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  </span><span style="color:#24292E;">const</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">ob</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> (</span><span style="color:#005CC5;">target</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">any</span><span style="color:#032F62;">).__ob__;</span></span>
<span class="line"><span style="color:#032F62;">  if (target._isVue || (</span><span style="color:#005CC5;">ob</span><span style="color:#032F62;"> &amp;&amp; ob.vmCount)) {</span></span>
<span class="line"><span style="color:#032F62;">    p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#032F62;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#032F62;">      warn(</span></span>
<span class="line"><span style="color:#032F62;">        </span><span style="color:#032F62;">&quot;Avoid deleting properties on a Vue instance or its root $data &quot;</span><span style="color:#032F62;"> +</span></span>
<span class="line"><span style="color:#032F62;">          </span><span style="color:#032F62;">&quot;- just set it to null.&quot;</span></span>
<span class="line"><span style="color:#032F62;">      );</span></span>
<span class="line"><span style="color:#032F62;">    return;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  if (!hasOwn(target, key)) {</span></span>
<span class="line"><span style="color:#032F62;">    return;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  delete target[key];</span></span>
<span class="line"><span style="color:#032F62;">  if (!ob) {</span></span>
<span class="line"><span style="color:#032F62;">    return;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">  ob.dep.notify();</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>该方法的内部原理与<code>set</code>方法有几分相似，都是根据不同情况作出不同处理。</p><p>首先判断在非生产环境下如果传入的<code>target</code>不存在，或者<code>target</code>是原始值，则抛出警告，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(target) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPrimitive</span><span style="color:#E1E4E8;">(target))</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`Cannot set reactive property on undefined, null, or primitive value: \${</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">target</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">any</span><span style="color:#9ECBFF;">)}\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  );</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(target) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPrimitive</span><span style="color:#24292E;">(target))</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`Cannot set reactive property on undefined, null, or primitive value: \${</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">target</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">any</span><span style="color:#032F62;">)}\`</span></span>
<span class="line"><span style="color:#032F62;">  );</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>接着判断如果传入的<code>target</code>是数组并且传入的<code>key</code>是有效索引的话，就使用数组的<code>splice</code>方法将索引<code>key</code>对应的值删掉，为什么要用<code>splice</code>方法上文中也解释了，就是因为数组的<code>splice</code>方法已经被我们创建的拦截器重写了，所以使用该方法会自动通知相关依赖。如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(target) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isValidArrayIndex</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  target.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(key, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(target) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isValidArrayIndex</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">  target.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(key, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果传入的<code>target</code>不是数组，那就当做对象来处理。</p><p>接下来获取到<code>target</code>的<code>__ob__</code>属性，我们说过，该属性是否为<code>true</code>标志着<code>target</code>是否为响应式对象，接着判断如果<code>tragte</code>是 <code>Vue</code> 实例，或者是 <code>Vue</code> 实例的根数据对象，则抛出警告并退出程序，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">).__ob__;</span></span>
<span class="line"><span style="color:#E1E4E8;">if (target._isVue || (</span><span style="color:#FFAB70;">ob</span><span style="color:#E1E4E8;"> &amp;&amp; ob.vmCount)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    warn(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span><span style="color:#E1E4E8;"> +</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;at runtime - declare it upfront in the data option.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  return val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">).__ob__;</span></span>
<span class="line"><span style="color:#24292E;">if (target._isVue || (</span><span style="color:#E36209;">ob</span><span style="color:#24292E;"> &amp;&amp; ob.vmCount)) {</span></span>
<span class="line"><span style="color:#24292E;">  p<wbr>rocess.env.NODE_ENV !== </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    warn(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span><span style="color:#24292E;"> +</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;at runtime - declare it upfront in the data option.&quot;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  return val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着判断传入的<code>key</code>是否存在于<code>target</code>中，如果<code>key</code>本来就不存在于<code>target</code>中，那就不用删除，直接退出程序即可，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasOwn</span><span style="color:#E1E4E8;">(target, key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasOwn</span><span style="color:#24292E;">(target, key)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>最后，如果<code>target</code>是对象，并且传入的<code>key</code>也存在于<code>target</code>中，那么就从<code>target</code>中将该属性删除，同时判断当前的<code>target</code>是否为响应式对象，如果是响应式对象，则通知依赖更新；如果不是，删除完后直接返回不通知更新，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> target[key];</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ob) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">ob.dep.</span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> target[key];</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ob) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">ob.dep.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以上，就是<code>delete</code>方法的内部原理。</p>`,107),c=[o];function r(t,y,E,i,d,u){return n(),a("div",null,c)}const m=s(e,[["render",r]]);export{F as __pageData,m as default};
