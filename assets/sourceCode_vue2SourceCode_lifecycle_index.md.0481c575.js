import{_ as e,o,c,Q as d}from"./chunks/framework.fd95ed2e.js";const a="/assets/1.fd5ed668.jpg",f=JSON.parse('{"title":"生命周期篇综述","description":"","frontmatter":{"title":"生命周期篇综述"},"headers":[],"relativePath":"sourceCode/vue2SourceCode/lifecycle/index.md","filePath":"sourceCode/vue2SourceCode/lifecycle/index.md"}'),t={name:"sourceCode/vue2SourceCode/lifecycle/index.md"},i=d('<h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>在<code>Vue</code>中，每个<code>Vue</code>实例从被创建出来到最终被销毁都会经历一个过程，就像人一样，从出生到死亡。在这一过程里会发生许许多多的事，例如设置数据监听，编译模板，组件挂载等。在<code>Vue</code>中，把<code>Vue</code>实例从被创建出来到最终被销毁的这一过程称为<code>Vue</code>实例的生命周期，同时，在<code>Vue</code>实例生命周期的不同阶段<code>Vue</code>还提供了不同的钩子函数，以方便用户在不同的生命周期阶段做一些额外的事情。那么，接下来的几篇文章我们就从源码角度深入剖析一下一个<code>Vue</code>实例在从生到死的生命周期里到底都经历了些什么，每个阶段都做了哪些事情。</p><h2 id="_2-生命周期流程图" tabindex="-1">2. 生命周期流程图 <a class="header-anchor" href="#_2-生命周期流程图" aria-label="Permalink to &quot;2. 生命周期流程图&quot;">​</a></h2><p>下图是<code>Vue</code>官网给出的<code>Vue</code>实例的生命周期流程图，如下：</p><p><img src="'+a+'" alt=""></p><p>从图中我们可以看到，<code>Vue</code>实例的生命周期大致可分为4个阶段：</p><ul><li>初始化阶段：为<code>Vue</code>实例上初始化一些属性，事件以及响应式数据；</li><li>模板编译阶段：将模板编译成渲染函数；</li><li>挂载阶段：将实例挂载到指定的<code>DOM</code>上，即将模板渲染到真实<code>DOM</code>中；</li><li>销毁阶段：将实例自身从父组件中删除，并取消依赖追踪及事件监听器；</li></ul><h2 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3. 总结&quot;">​</a></h2><p>本篇文章是生命周期篇的开篇综述，借用<code>Vue</code>官网的生命周期流程图介绍了一个<code>Vue</code>实例的生命周期大致可分为四个阶段，分别是初始化阶段、模板编译阶段、挂载阶段、销毁阶段。接下来的几篇文章我们就从这个流程图为基础，自上到下，从每个阶段入手，深入分析在每个阶段里都干了些什么。</p>',9),r=[i];function l(s,u,_,n,p,h){return o(),c("div",null,r)}const m=e(t,[["render",l]]);export{f as __pageData,m as default};
