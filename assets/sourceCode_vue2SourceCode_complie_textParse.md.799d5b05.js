import{_ as e,o,c,k as n,a as s,t as a,Q as l}from"./chunks/framework.fd95ed2e.js";const f=JSON.parse('{"title":"模板解析阶段(文本解析器)","description":"","frontmatter":{"title":"模板解析阶段(文本解析器)"},"headers":[],"relativePath":"sourceCode/vue2SourceCode/complie/textParse.md","filePath":"sourceCode/vue2SourceCode/complie/textParse.md"}'),t={name:"sourceCode/vue2SourceCode/complie/textParse.md"},r=l(`<h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>在上篇文章中我们说了，当<code>HTML</code>解析器解析到文本内容时会调用4个钩子函数中的<code>chars</code>函数来创建文本型的<code>AST</code>节点，并且也说了在<code>chars</code>函数中会根据文本内容是否包含变量再细分为创建含有变量的<code>AST</code>节点和不包含变量的<code>AST</code>节点，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当解析到标签的文本时，触发chars</span></span>
<span class="line"><span style="color:#B392F0;">chars</span><span style="color:#E1E4E8;"> (text) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseText</span><span style="color:#E1E4E8;">(text)){</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           type: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           expression: res.expression,</span></span>
<span class="line"><span style="color:#E1E4E8;">           tokens: res.tokens,</span></span>
<span class="line"><span style="color:#E1E4E8;">           text</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           type: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           text</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当解析到标签的文本时，触发chars</span></span>
<span class="line"><span style="color:#6F42C1;">chars</span><span style="color:#24292E;"> (text) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseText</span><span style="color:#24292E;">(text)){</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           type: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">           expression: res.expression,</span></span>
<span class="line"><span style="color:#24292E;">           tokens: res.tokens,</span></span>
<span class="line"><span style="color:#24292E;">           text</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           type: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">           text</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>从上面代码中可以看到，创建含有变量的<code>AST</code>节点时节点的<code>type</code>属性为2，并且相较于不包含变量的<code>AST</code>节点多了两个属性：<code>expression</code>和<code>tokens</code>。那么如何来判断文本里面是否包含变量以及多的那两个属性是什么呢？这就涉及到文本解析器了，当<code>Vue</code>用<code>HTML</code>解析器解析出文本时，再将解析出来的文本内容传给文本解析器，最后由文本解析器解析该段文本里面是否包含变量以及如果包含变量时再解析<code>expression</code>和<code>tokens</code>。那么接下来，本篇文章就来分析一下文本解析器都干了些什么。</p><h2 id="_2-结果分析" tabindex="-1">2. 结果分析 <a class="header-anchor" href="#_2-结果分析" aria-label="Permalink to &quot;2. 结果分析&quot;">​</a></h2><p>研究文本解析器内部原理之前，我们先来看一下由<code>HTML</code>解析器解析得到的文本内容经过文本解析器后输出的结果是什么样子的，这样对我们后面分析文本解析器内部原理会有很大的帮助。</p><p>从上面<code>chars</code>函数的代码中可以看到，把<code>HTML</code>解析器解析得到的文本内容<code>text</code>传给文本解析器<code>parseText</code>函数，根据<code>parseText</code>函数是否有返回值判断该文本是否包含变量，以及从返回值中取到需要的<code>expression</code>和<code>tokens</code>。那么我们就先来看一下<code>parseText</code>函数如果有返回值，那么它的返回值是什么样子的。</p><p>假设现有由<code>HTML</code>解析器解析得到的文本内容如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;我叫{{name}}，我今年{{age}}岁了&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;我叫{{name}}，我今年{{age}}岁了&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>经过文本解析器解析后得到：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseText</span><span style="color:#E1E4E8;">(text)</span></span>
<span class="line"><span style="color:#E1E4E8;">res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expression:</span><span style="color:#9ECBFF;">&quot;我叫&quot;</span><span style="color:#F97583;">+</span><span style="color:#B392F0;">_s</span><span style="color:#E1E4E8;">(name)</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;，我今年&quot;</span><span style="color:#F97583;">+</span><span style="color:#B392F0;">_s</span><span style="color:#E1E4E8;">(age)</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;岁了&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens:[</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;我叫&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#9ECBFF;">&#39;@binding&#39;</span><span style="color:#E1E4E8;">: name },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;，我今年&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#9ECBFF;">&#39;@binding&#39;</span><span style="color:#E1E4E8;">: age },</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#9ECBFF;">&quot;岁了&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseText</span><span style="color:#24292E;">(text)</span></span>
<span class="line"><span style="color:#24292E;">res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    expression:</span><span style="color:#032F62;">&quot;我叫&quot;</span><span style="color:#D73A49;">+</span><span style="color:#6F42C1;">_s</span><span style="color:#24292E;">(name)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;，我今年&quot;</span><span style="color:#D73A49;">+</span><span style="color:#6F42C1;">_s</span><span style="color:#24292E;">(age)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;岁了&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    tokens:[</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;我叫&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#032F62;">&#39;@binding&#39;</span><span style="color:#24292E;">: name },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;，我今年&quot;</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#032F62;">&#39;@binding&#39;</span><span style="color:#24292E;">: age },</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#032F62;">&quot;岁了&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>从上面的结果中我们可以看到，<code>expression</code>属性就是把文本中的变量和非变量提取出来，然后把变量用<code>_s()</code>包裹，最后按照文本里的顺序把它们用<code>+</code>连接起来。而<code>tokens</code>是个数组，数组内容也是文本中的变量和非变量，不一样的是把变量构造成<code>{&#39;@binding&#39;: xxx}</code>。</p><p>那么这样做有什么用呢？这主要是为了给后面代码生成阶段的生成<code>render</code>函数时用的，这个我们在后面介绍代码生成阶段是会详细说明，此处暂可理解为单纯的在构造形式。</p><p>OK，现在我们就可以知道文本解析器内部就干了三件事：</p><ul><li>判断传入的文本是否包含变量</li><li>构造expression</li><li>构造tokens</li></ul><p>那么接下来我们就通过阅读源码，逐行分析文本解析器内部工作原理。</p><h2 id="_3-源码分析" tabindex="-1">3. 源码分析 <a class="header-anchor" href="#_3-源码分析" aria-label="Permalink to &quot;3. 源码分析&quot;">​</a></h2><p>文本解析器的源码位于 <code>src/compiler/parser/text-parsre.js</code> 中，代码如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">defaultTagRE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\{\\{</span><span style="color:#DBEDFF;">((?:</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">\\n</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\}\\}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buildRegex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cached</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">delimiters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> delimiters[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(regexEscapeRE, </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">$&amp;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">close</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> delimiters[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(regexEscapeRE, </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">$&amp;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(open </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;((?:.|</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">n)+?)&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> close, </span><span style="color:#9ECBFF;">&#39;g&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseText</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">delimiters</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tagRE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> delimiters </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildRegex</span><span style="color:#E1E4E8;">(delimiters) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> defaultTagRE</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tagRE.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(text)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tokens</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rawTokens</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * let lastIndex = tagRE.lastIndex = 0</span></span>
<span class="line"><span style="color:#6A737D;">   * 上面这行代码等同于下面这两行代码:</span></span>
<span class="line"><span style="color:#6A737D;">   * tagRE.lastIndex = 0</span></span>
<span class="line"><span style="color:#6A737D;">   * let lastIndex = tagRE.lastIndex</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lastIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRE.lastIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> match, index, tokenValue</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRE.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(text))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> match.index</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// push text token</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> lastIndex) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 先把&#39;{{&#39;前面的文本放入tokens中</span></span>
<span class="line"><span style="color:#E1E4E8;">      rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(lastIndex, index))</span></span>
<span class="line"><span style="color:#E1E4E8;">      tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(tokenValue))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// tag token</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 取出&#39;{{ }}&#39;中间的变量exp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseFilters</span><span style="color:#E1E4E8;">(match[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 把变量exp改成_s(exp)形式也放入tokens中</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`_s(\${</span><span style="color:#E1E4E8;">exp</span><span style="color:#9ECBFF;">})\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ </span><span style="color:#9ECBFF;">&#39;@binding&#39;</span><span style="color:#E1E4E8;">: exp })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置lastIndex 以保证下一轮循环时，只从&#39;}}&#39;后面再开始匹配正则</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> match[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 此时如果lastIndex &lt; text.length，表示在最后一个变量后面还有文本</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最后将后面的文本再加入到tokens中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> text.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(lastIndex))</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(tokenValue))</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最后把数组tokens中的所有元素用&#39;+&#39;拼接起来</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expression: tokens.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens: rawTokens</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">defaultTagRE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\{\\{</span><span style="color:#032F62;">((?:</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\}\\}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buildRegex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cached</span><span style="color:#24292E;">(</span><span style="color:#E36209;">delimiters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delimiters[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(regexEscapeRE, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">$&amp;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">close</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delimiters[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(regexEscapeRE, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">$&amp;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(open </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;((?:.|</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">n)+?)&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> close, </span><span style="color:#032F62;">&#39;g&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseText</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">text</span><span style="color:#24292E;">,</span><span style="color:#E36209;">delimiters</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tagRE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delimiters </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildRegex</span><span style="color:#24292E;">(delimiters) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> defaultTagRE</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tagRE.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(text)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tokens</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rawTokens</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * let lastIndex = tagRE.lastIndex = 0</span></span>
<span class="line"><span style="color:#6A737D;">   * 上面这行代码等同于下面这两行代码:</span></span>
<span class="line"><span style="color:#6A737D;">   * tagRE.lastIndex = 0</span></span>
<span class="line"><span style="color:#6A737D;">   * let lastIndex = tagRE.lastIndex</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRE.lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> match, index, tokenValue</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRE.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(text))) {</span></span>
<span class="line"><span style="color:#24292E;">    index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> match.index</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// push text token</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> lastIndex) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 先把&#39;{{&#39;前面的文本放入tokens中</span></span>
<span class="line"><span style="color:#24292E;">      rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(lastIndex, index))</span></span>
<span class="line"><span style="color:#24292E;">      tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(tokenValue))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// tag token</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 取出&#39;{{ }}&#39;中间的变量exp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseFilters</span><span style="color:#24292E;">(match[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 把变量exp改成_s(exp)形式也放入tokens中</span></span>
<span class="line"><span style="color:#24292E;">    tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`_s(\${</span><span style="color:#24292E;">exp</span><span style="color:#032F62;">})\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ </span><span style="color:#032F62;">&#39;@binding&#39;</span><span style="color:#24292E;">: exp })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置lastIndex 以保证下一轮循环时，只从&#39;}}&#39;后面再开始匹配正则</span></span>
<span class="line"><span style="color:#24292E;">    lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> match[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 此时如果lastIndex &lt; text.length，表示在最后一个变量后面还有文本</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最后将后面的文本再加入到tokens中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> text.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(lastIndex))</span></span>
<span class="line"><span style="color:#24292E;">    tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(tokenValue))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最后把数组tokens中的所有元素用&#39;+&#39;拼接起来</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    expression: tokens.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    tokens: rawTokens</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>我们看到，除开我们自己加的注释，代码其实不复杂，我们逐行分析。</p><p><code>parseText</code>函数接收两个参数，一个是传入的待解析的文本内容<code>text</code>，一个包裹变量的符号<code>delimiters</code>。第一个参数好理解，那第二个参数是干什么的呢？别急，我们看函数体内第一行代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tagRE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> delimiters </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildRegex</span><span style="color:#E1E4E8;">(delimiters) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> defaultTagRE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tagRE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delimiters </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildRegex</span><span style="color:#24292E;">(delimiters) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> defaultTagRE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,22),E=n("code",null,"tagRE",-1),y=n("code",null,"tagRE",-1),i=n("code",null,"tagRE",-1),d=n("code",null,"delimiters",-1),u=n("code",null,"delimiters",-1),F=n("code",null,"Vue",-1),b=n("code",null,"%",-1),m=l(`<p>接下来用<code>tagRE</code>去匹配传入的文本内容，判断是否包含变量，若不包含，则直接返回，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tagRE.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(text)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tagRE.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(text)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果包含变量，那就继续往下看：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tokens</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rawTokens</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lastIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRE.lastIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> match, index, tokenValue</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRE.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(text))) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tokens</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rawTokens</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRE.lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> match, index, tokenValue</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRE.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(text))) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>接下来会开启一个<code>while</code>循环，循环结束条件是<code>tagRE.exec(text)</code>的结果<code>match</code>是否为<code>null</code>，<code>exec( )</code>方法是在一个字符串中执行匹配检索，如果它没有找到任何匹配就返回<code>null</code>，但如果它找到了一个匹配就返回一个数组。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tagRE.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello {{name}}，I am {{age}}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//返回：[&quot;{{name}}&quot;, &quot;name&quot;, index: 6, input: &quot;hello {{name}}，I am {{age}}&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#E1E4E8;">tagRE.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//返回：null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tagRE.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello {{name}}，I am {{age}}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//返回：[&quot;{{name}}&quot;, &quot;name&quot;, index: 6, input: &quot;hello {{name}}，I am {{age}}&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#24292E;">tagRE.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//返回：null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以看到，当匹配上时，匹配结果的第一个元素是字符串中第一个完整的带有包裹的变量，第二个元素是第一个被包裹的变量名，第三个元素是第一个变量在字符串中的起始位置。</p><p>接着往下看循环体内：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRE.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(text))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> match.index</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> lastIndex) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 先把&#39;{{&#39;前面的文本放入tokens中</span></span>
<span class="line"><span style="color:#E1E4E8;">      rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(lastIndex, index))</span></span>
<span class="line"><span style="color:#E1E4E8;">      tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(tokenValue))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// tag token</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 取出&#39;{{ }}&#39;中间的变量exp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> match[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 把变量exp改成_s(exp)形式也放入tokens中</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`_s(\${</span><span style="color:#E1E4E8;">exp</span><span style="color:#9ECBFF;">})\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ </span><span style="color:#9ECBFF;">&#39;@binding&#39;</span><span style="color:#E1E4E8;">: exp })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置lastIndex 以保证下一轮循环时，只从&#39;}}&#39;后面再开始匹配正则</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> match[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRE.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(text))) {</span></span>
<span class="line"><span style="color:#24292E;">    index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> match.index</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> lastIndex) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 先把&#39;{{&#39;前面的文本放入tokens中</span></span>
<span class="line"><span style="color:#24292E;">      rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(lastIndex, index))</span></span>
<span class="line"><span style="color:#24292E;">      tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(tokenValue))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// tag token</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 取出&#39;{{ }}&#39;中间的变量exp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> match[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 把变量exp改成_s(exp)形式也放入tokens中</span></span>
<span class="line"><span style="color:#24292E;">    tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`_s(\${</span><span style="color:#24292E;">exp</span><span style="color:#032F62;">})\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ </span><span style="color:#032F62;">&#39;@binding&#39;</span><span style="color:#24292E;">: exp })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置lastIndex 以保证下一轮循环时，只从&#39;}}&#39;后面再开始匹配正则</span></span>
<span class="line"><span style="color:#24292E;">    lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> match[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面代码中，首先取得字符串中第一个变量在字符串中的起始位置赋给<code>index</code>，然后比较<code>index</code>和<code>lastIndex</code>的大小，此时你可能有疑问了，这个<code>lastIndex</code>是什么呢？在上面定义变量中，定义了<code>let lastIndex = tagRE.lastIndex = 0</code>,所以<code>lastIndex</code>就是<code>tagRE.lastIndex</code>，而<code>tagRE.lastIndex</code>又是什么呢？当调用<code>exec( )</code>的正则表达式对象具有修饰符<code>g</code>时，它将把当前正则表达式对象的<code>lastIndex</code>属性设置为紧挨着匹配子串的字符位置，当同一个正则表达式第二次调用<code>exec( )</code>，它会将从<code>lastIndex</code>属性所指示的字符串处开始检索，如果<code>exec( )</code>没有发现任何匹配结果，它会将<code>lastIndex</code>重置为0。示例如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tagRE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\{\\{</span><span style="color:#DBEDFF;">((?:</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">\\n</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\}\\}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span></span>
<span class="line"><span style="color:#E1E4E8;">tagRE.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello {{name}}，I am {{age}}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">tagRE.lastIndex   </span><span style="color:#6A737D;">// 14</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tagRE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\{\\{</span><span style="color:#032F62;">((?:</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\}\\}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span></span>
<span class="line"><span style="color:#24292E;">tagRE.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello {{name}}，I am {{age}}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">tagRE.lastIndex   </span><span style="color:#6A737D;">// 14</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从示例中可以看到，<code>tagRE.lastIndex</code>就是第一个包裹变量最后一个<code>}</code>所在字符串中的位置。<code>lastIndex</code>初始值为0。</p><p>那么接下里就好理解了，当<code>index&gt;lastIndex</code>时，表示变量前面有纯文本，那么就把这段纯文本截取出来，存入<code>rawTokens</code>中，同时再调用<code>JSON.stringify</code>给这段文本包裹上双引号，存入<code>tokens</code>中，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> lastIndex) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 先把&#39;{{&#39;前面的文本放入tokens中</span></span>
<span class="line"><span style="color:#E1E4E8;">    rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(lastIndex, index))</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(tokenValue))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> lastIndex) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 先把&#39;{{&#39;前面的文本放入tokens中</span></span>
<span class="line"><span style="color:#24292E;">    rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(lastIndex, index))</span></span>
<span class="line"><span style="color:#24292E;">    tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(tokenValue))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,14),h=n("code",null,"index",-1),x=n("code",null,"lastIndex",-1),g=n("code",null,"index",-1),C=n("code",null,"_s()",-1),A=n("code",null,"tokens",-1),D=n("code",null,"{'@binding': exp}",-1),k=n("code",null,"rawTokens",-1),v=l(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 取出&#39;{{ }}&#39;中间的变量exp</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> match[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 把变量exp改成_s(exp)形式也放入tokens中</span></span>
<span class="line"><span style="color:#E1E4E8;">tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`_s(\${</span><span style="color:#E1E4E8;">exp</span><span style="color:#9ECBFF;">})\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ </span><span style="color:#9ECBFF;">&#39;@binding&#39;</span><span style="color:#E1E4E8;">: exp })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 取出&#39;{{ }}&#39;中间的变量exp</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> match[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 把变量exp改成_s(exp)形式也放入tokens中</span></span>
<span class="line"><span style="color:#24292E;">tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`_s(\${</span><span style="color:#24292E;">exp</span><span style="color:#032F62;">})\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ </span><span style="color:#032F62;">&#39;@binding&#39;</span><span style="color:#24292E;">: exp })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>接着，更新<code>lastIndex </code>以保证下一轮循环时，只从<code>}}</code>后面再开始匹配正则，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">lastIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> match[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">length</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> match[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">length</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接着，当<code>while</code>循环完毕时，表明文本中所有变量已经被解析完毕，如果此时<code>lastIndex &lt; text.length</code>，那就说明最后一个变量的后面还有纯文本，那就将其再存入<code>tokens</code>和<code>rawTokens</code>中，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕</span></span>
<span class="line"><span style="color:#6A737D;">// 此时如果lastIndex &lt; text.length，表示在最后一个变量后面还有文本</span></span>
<span class="line"><span style="color:#6A737D;">// 最后将后面的文本再加入到tokens中</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> text.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rawTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(lastIndex))</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(tokenValue))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕</span></span>
<span class="line"><span style="color:#6A737D;">// 此时如果lastIndex &lt; text.length，表示在最后一个变量后面还有文本</span></span>
<span class="line"><span style="color:#6A737D;">// 最后将后面的文本再加入到tokens中</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> text.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    rawTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(lastIndex))</span></span>
<span class="line"><span style="color:#24292E;">    tokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(tokenValue))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>最后，把<code>tokens</code>数组里的元素用<code>+</code>连接，和<code>rawTokens</code>一并返回，如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expression: tokens.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens: rawTokens</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    expression: tokens.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    tokens: rawTokens</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上就是文本解析器<code>parseText</code>函数的所有逻辑了。</p><h2 id="_4-总结" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h2><p>本篇文章介绍了文本解析器的内部工作原理，文本解析器的作用就是将<code>HTML</code>解析器解析得到的文本内容进行二次解析，解析文本内容中是否包含变量，如果包含变量，则将变量提取出来进行加工，为后续生产<code>render</code>函数做准备。</p>`,10);function B(p,_,I,T,R,w){return o(),c("div",null,[r,n("p",null,[s("函数体内首先定义了变量"),E,s("，表示一个正则表达式。这个正则表达式是用来检查文本中是否包含变量的。我们知道，通常我们在模板中写变量时是这样写的：hello "+a(p.name)+"。这里用",1),n("code",null,a(),1),s("包裹的内容就是变量。所以我们就知道，"),y,s("是用来检测文本内是否有"),n("code",null,a(),1),s("。而"),i,s("又是可变的，它是根据是否传入了"),d,s("参数从而又不同的值，也就是说如果没有传入"),u,s("参数，则是检测文本是否包含"),n("code",null,a(),1),s("，如果传入了值，就会检测文本是否包含传入的值。换句话说在开发"),F,s("项目中，用户可以自定义文本内包含变量所使用的符号，例如你可以使用"),b,s("包裹变量如：hello %name%。")]),m,n("p",null,[s("如果"),h,s("不大于"),x,s("，那说明"),g,s("也为0，即该文本一开始就是变量，例如："),n("code",null,a(p.name)+"hello",1),s("。那么此时变量前面没有纯文本，那就不用截取，直接取出匹配结果的第一个元素变量名，将其用"),C,s("包裹存入"),A,s("中，同时再把变量名构造成"),D,s("存入"),k,s("中，如下：")]),v])}const j=e(t,[["render",B]]);export{f as __pageData,j as default};
