import{_ as c,C as a,o as t,c as r,H as s,w as n,k as e,a as o,Q as _}from"./chunks/framework.fd95ed2e.js";const S=JSON.parse('{"title":"综述","description":"","frontmatter":{},"headers":[],"relativePath":"sourceCode/vue2SourceCode/reactive/index.md","filePath":"sourceCode/vue2SourceCode/reactive/index.md"}'),i={name:"sourceCode/vue2SourceCode/reactive/index.md"},p=e("h1",{id:"综述",tabindex:"-1"},[o("综述 "),e("a",{class:"header-anchor",href:"#综述","aria-label":'Permalink to "综述"'},"​")],-1),l=e("h2",{id:"_1-前言",tabindex:"-1"},[o("1. 前言 "),e("a",{class:"header-anchor",href:"#_1-前言","aria-label":'Permalink to "1. 前言"'},"​")],-1),u=e("p",null,[o("众所周知，"),e("code",null,"Vue"),o("最大的特点之一就是数据驱动视图，那么什么是数据驱动视图呢？在这里，我们可以把数据理解为状态，而视图就是用户可直观看到页面。页面不可能是一成不变的，它应该是动态变化的，而它的变化也不应该是无迹可寻的，它或者是由用户操作引起的，亦或者是由后端数据变化引起的，不管它是因为什么引起的，我们统称为它的状态变了，它由前一个状态变到了后一个状态，页面也就应该随之而变化，所以我们就可以得到如下一个公式：")],-1),h=_('<p>上述公式中：状态<code>state</code>是输入，页面<code>UI</code>输出，状态输入一旦变化了，页面输出也随之而变化。我们把这种特性称之为数据驱动视图。</p><p>OK，有了基本概念以后，我们再把上述公式拆成三部分：<code>state</code>、<code>render()</code>以及<code>UI</code>。我们知道<code>state</code>和<code>UI</code>都是用户定的，而不变的是这个<code>render()</code>。所以<code>Vue</code>就扮演了<code>render()</code>这个角色，当<code>Vue</code>发现<code>state</code>变化之后，经过一系列加工，最终将变化反应在<code>UI</code>上。</p><p>那么第一个问题来了，<code>Vue</code>怎么知道<code>state</code>变化了呢？</p><h2 id="_2-什么是变化侦测" tabindex="-1">2. 什么是变化侦测 <a class="header-anchor" href="#_2-什么是变化侦测" aria-label="Permalink to &quot;2. 什么是变化侦测&quot;">​</a></h2><p>那<code>Vue</code>是怎么知道<code>state</code>变化了呢？换句话说，数据变化了是怎么通知给<code>Vue</code>呢？那么，这就引出了<code>Vue</code>中的变化侦测。</p><p>变化侦测就是追踪状态，亦或者说是数据的变化，一旦发生了变化，就要去更新视图。</p><p>变化侦测可不是个新名词，它在目前的前端三大框架中均有涉及。在<code>Angular</code>中是通过脏值检查流程来实现变化侦测；在<code>React</code>是通过对比虚拟<code>DOM</code>来实现变化侦测，而在<code>Vue</code>中也有自己的一套变化侦测实现机制。</p><p>那么，接下来我们就通过阅读源码来学习一下<code>Vue</code>是怎么实现自己的对数据变化进行侦测的机制。</p><h2 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3. 总结&quot;">​</a></h2><p>首先，我们知道了什么是数据驱动视图。数据驱动视图简单来说就是数据变化引起视图变化，那么第一步就是先要知道数据什么时候发生变化，也就是说对数据的变化要进行侦测。</p><p>其次，数据的变化侦测在三大框架中均有涉及，不同的框架有着自己的一套侦测机制。</p><p>最后，我们从源码出发，学习在<code>Vue</code>中是如何对数据进行变化侦测的。</p>',12);function V(f,m,x,C,v,b){const d=a("font");return t(),r("div",null,[p,l,u,s(d,{color:"red"},{default:n(()=>[o("**UI = render(state)**")]),_:1}),h])}const k=c(i,[["render",V]]);export{S as __pageData,k as default};
