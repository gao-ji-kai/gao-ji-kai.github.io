import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.fd95ed2e.js";const p="/assets/7.54eb993e.jpg",o="/assets/8.5e16f310.png",e="/assets/9.f3f7953c.png",r="/assets/10.7376fe68.png",c="/assets/11.bcf54f2e.png",t="/assets/12.a4e28af7.png",d="/assets/13.51a8237e.png",E="/assets/14.886e33d4.png",y="/assets/15.fbe3f409.png",x=JSON.parse('{"title":"优化更新子节点","description":"","frontmatter":{},"headers":[],"relativePath":"sourceCode/vue2SourceCode/virtualDOM/optimizeUpdataChildren.md","filePath":"sourceCode/vue2SourceCode/virtualDOM/optimizeUpdataChildren.md"}'),i={name:"sourceCode/vue2SourceCode/virtualDOM/optimizeUpdataChildren.md"},h=l(`<h1 id="优化更新子节点" tabindex="-1">优化更新子节点 <a class="header-anchor" href="#优化更新子节点" aria-label="Permalink to &quot;优化更新子节点&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>在上一篇文章中，我们介绍了当新的<code>VNode</code>与旧的<code>oldVNode</code>都是元素节点并且都包含子节点时，<code>Vue</code>对子节点是</p><p>先外层循环<code>newChildren</code>数组，再内层循环<code>oldChildren</code>数组，每循环外层<code>newChildren</code>数组里的一个子节点，就去内层<code>oldChildren</code>数组里找看有没有与之相同的子节点，最后根据不同的情况作出不同的操作。</p><p>在上一篇文章的结尾我们也说了，这种方法虽然能够解决问题，但是还存在可优化的地方。比如当包含的子节点数量很多时，这样循环算法的时间复杂度就会变的很大，不利于性能提升。当然，<code>Vue</code>也意识到了这点，并对此也进行了优化，那么本篇文章，就来学习一下关于子节点更新的优化问题<code>Vue</code>是如何做的。</p><h2 id="_2-优化策略介绍" tabindex="-1">2. 优化策略介绍 <a class="header-anchor" href="#_2-优化策略介绍" aria-label="Permalink to &quot;2. 优化策略介绍&quot;">​</a></h2><p>假如我们现有一份新的<code>newChildren</code>数组和旧的<code>oldChildren</code>数组，如下所示：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">newChildren </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;新子节点1&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;新子节点2&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;新子节点3&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;新子节点4&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">oldChildren </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;旧子节点1&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;旧子节点2&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;旧子节点3&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;旧子节点4&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">newChildren </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;新子节点1&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;新子节点2&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;新子节点3&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;新子节点4&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">oldChildren </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;旧子节点1&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;旧子节点2&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;旧子节点3&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;旧子节点4&#39;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果按照优化之前的解决方案，那么我们接下来的操作应该是这样的：先循环<code>newChildren</code>数组，拿到第一个新子节点1，然后用第一个新子节点1去跟<code>oldChildren</code>数组里的旧子节点逐一对比，如果运气好一点，刚好<code>oldChildren</code>数组里的第一个旧子节点1与第一个新子节点1相同，那就皆大欢喜，直接处理，不用再往下循环了。那如果运气坏一点，直到循环到<code>oldChildren</code>数组里的第四个旧子节点4才与第一个新子节点1相同，那此时就会多循环了4次。我们不妨把情况再设想的极端一点，如果<code>newChildren</code>数组和<code>oldChildren</code>数组里前三个节点都没有变化，只是第四个节点发生了变化，那么我们就会循环16次，只有在第16次循环的时候才发现新节点4与旧节点4相同，进行更新，如下图所示： <img src="`+p+'" alt=""></p><p>上面例子中只有四个子节点，好像还看不出来有什么缺陷，但是当子节点数量很多的时候，算法的时间复杂度就会非常高，很不利于性能提升。</p><p>那么我们该怎么优化呢？其实我们可以这样想，我们不要按顺序去循环<code>newChildren</code>和<code>oldChildren</code>这两个数组，可以先比较这两个数组里特殊位置的子节点，比如：</p><ul><li>先把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li><li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li><li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</li><li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</li><li>最后四种情况都试完如果还不同，那就按照之前循环的方式来查找节点。</li></ul><p>其过程如下图所示： <img src="'+o+'" alt=""></p><p>在上图中，我们把：</p><ul><li><code>newChildren</code>数组里的所有未处理子节点的第一个子节点称为：新前；</li><li><code>newChildren</code>数组里的所有未处理子节点的最后一个子节点称为：新后；</li><li><code>oldChildren</code>数组里的所有未处理子节点的第一个子节点称为：旧前；</li><li><code>oldChildren</code>数组里的所有未处理子节点的最后一个子节点称为：旧后；</li></ul><p>OK，有了以上概念以后，下面我们就来看看其具体是如何实施的。</p><h2 id="_3-新前与旧前" tabindex="-1">3. 新前与旧前 <a class="header-anchor" href="#_3-新前与旧前" aria-label="Permalink to &quot;3. 新前与旧前&quot;">​</a></h2><p>把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那好极了，直接进入之前文章中说的更新节点的操作并且由于新前与旧前两个节点的位置也相同，无需进行节点移动操作；如果不同，没关系，再尝试后面三种情况。 <img src="'+e+'" alt=""></p><h2 id="_4-新后与旧后" tabindex="-1">4. 新后与旧后 <a class="header-anchor" href="#_4-新后与旧后" aria-label="Permalink to &quot;4. 新后与旧后&quot;">​</a></h2><p>把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作并且由于新后与旧后两个节点的位置也相同，无需进行节点移动操作；如果不同，继续往后尝试。 <img src="'+r+'" alt=""></p><h2 id="_5-新后与旧前" tabindex="-1">5. 新后与旧前 <a class="header-anchor" href="#_5-新后与旧前" aria-label="Permalink to &quot;5. 新后与旧前&quot;">​</a></h2><p>把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置； <img src="'+c+'" alt=""></p><p>此时，出现了移动节点的操作，移动节点最关键的地方在于找准要移动的位置。我们一再强调，<strong>更新节点要以新<code>VNode</code>为基准，然后操作旧的<code>oldVNode</code>，使之最后旧的<code>oldVNode</code>与新的<code>VNode</code>相同</strong>。那么现在的情况是：<code>newChildren</code>数组里的最后一个子节点与<code>oldChildren</code>数组里的第一个子节点相同，那么我们就应该在<code>oldChildren</code>数组里把第一个子节点移动到最后一个子节点的位置，如下图：</p><p><img src="'+t+'" alt=""></p><p>从图中不难看出，我们要把<code>oldChildren</code>数组里把第一个子节点移动到数组中<strong>所有未处理节点之后</strong>。</p><p>如果对比之后发现这两个节点仍不是同一个节点，那就继续尝试最后一种情况。</p><h2 id="_6-新前与旧后" tabindex="-1">6. 新前与旧后 <a class="header-anchor" href="#_6-新前与旧后" aria-label="Permalink to &quot;6. 新前与旧后&quot;">​</a></h2><p>把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点移动到与<code>newChildren</code>数组里节点相同的位置；</p><p><img src="'+d+'" alt=""></p><p>同样，这种情况的节点移动位置逻辑与“新后与旧前”的逻辑类似，那就是<code>newChildren</code>数组里的第一个子节点与<code>oldChildren</code>数组里的最后一个子节点相同，那么我们就应该在<code>oldChildren</code>数组里把最后一个子节点移动到第一个子节点的位置，如下图：</p><p><img src="'+E+`" alt=""></p><p>从图中不难看出，我们要把<code>oldChildren</code>数组里把最后一个子节点移动到数组中<strong>所有未处理节点之前</strong>。</p><p>OK，以上就是子节点对比更新优化策略种的4种情况，如果以上4种情况逐个试遍之后要是还没找到相同的节点，那就再通过之前的循环方式查找。</p><h2 id="_7-回到源码" tabindex="-1">7. 回到源码 <a class="header-anchor" href="#_7-回到源码" aria-label="Permalink to &quot;7. 回到源码&quot;">​</a></h2><p>思路分析完，逻辑理清之后，我们再回到源码里看看，验证一下源码实现的逻辑是否跟我们分析的一样。源码如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 循环更新子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateChildren</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">parentElm</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldCh</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newCh</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">insertedVnodeQueue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">removeOnly</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldStartIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">// oldChildren开始索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldEndIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// oldChildren结束索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]        </span><span style="color:#6A737D;">// oldChildren中所有未处理节点中的第一个</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[oldEndIdx]   </span><span style="color:#6A737D;">// oldChildren中所有未处理节点中的最后一个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newStartIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">// newChildren开始索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newEndIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// newChildren结束索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]        </span><span style="color:#6A737D;">// newChildren中所有未处理节点中的第一个</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[newEndIdx]  </span><span style="color:#6A737D;">// newChildren中所有未处理节点中的最后一个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// to ensure removed elements stay in correct relative positions</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// during leaving transitions</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">canMove</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">removeOnly</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">checkDuplicateKeys</span><span style="color:#E1E4E8;">(newCh)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (oldStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> oldEndIdx </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> newStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(oldStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx] </span><span style="color:#6A737D;">// 如果oldStartVnode不存在，则直接跳过，比对下一个</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(oldEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果新前与旧前节点相同，就把两个节点进行patch更新</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果新后与旧后节点相同，就把两个节点进行patch更新</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode)) { </span><span style="color:#6A737D;">// Vnode moved right</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果新后与旧前节点相同，先把两个节点进行patch更新，然后把旧前节点移动到oldChilren中所有未处理节点之后</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">        canMove </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(parentElm, oldStartVnode.elm, nodeOps.</span><span style="color:#B392F0;">nextSibling</span><span style="color:#E1E4E8;">(oldEndVnode.elm))</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode)) { </span><span style="color:#6A737D;">// Vnode moved left</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果新前与旧后节点相同，先把两个节点进行patch更新，然后把旧后节点移动到oldChilren中所有未处理节点之前</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">        canMove </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">        newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果不属于以上四种情况，就进行常规的循环比对patch</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(oldKeyToIdx)) oldKeyToIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createKeyToOldIdx</span><span style="color:#E1E4E8;">(oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#E1E4E8;">        idxInOld </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(newStartVnode.key)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> oldKeyToIdx[newStartVnode.key]</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findIdxInOld</span><span style="color:#E1E4E8;">(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果在oldChildren里找不到当前循环的newChildren里的子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(idxInOld)) { </span><span style="color:#6A737D;">// New element</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 新增节点并插入到合适位置</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">createElm</span><span style="color:#E1E4E8;">(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, newCh, newStartIdx)</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果在oldChildren里找到了当前循环的newChildren里的子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">          vnodeToMove </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[idxInOld]</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果两个节点相同</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(vnodeToMove, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 调用patchVnode更新节点</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(vnodeToMove, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">            oldCh[idxInOld] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动</span></span>
<span class="line"><span style="color:#E1E4E8;">            canMove </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// same key but different element. treat as new element</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">createElm</span><span style="color:#E1E4E8;">(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, newCh, newStartIdx)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldStartIdx </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> oldEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 如果oldChildren比newChildren先循环完毕，</span></span>
<span class="line"><span style="color:#6A737D;">       * 那么newChildren里面剩余的节点都是需要新增的节点，</span></span>
<span class="line"><span style="color:#6A737D;">       * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      refElm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(newCh[newEndIdx </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> newCh[newEndIdx </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].elm</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addVnodes</span><span style="color:#E1E4E8;">(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newStartIdx </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 如果newChildren比oldChildren先循环完毕，</span></span>
<span class="line"><span style="color:#6A737D;">       * 那么oldChildren里面剩余的节点都是需要删除的节点，</span></span>
<span class="line"><span style="color:#6A737D;">       * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">removeVnodes</span><span style="color:#E1E4E8;">(parentElm, oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 循环更新子节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateChildren</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">parentElm</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldCh</span><span style="color:#24292E;">, </span><span style="color:#E36209;">newCh</span><span style="color:#24292E;">, </span><span style="color:#E36209;">insertedVnodeQueue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">removeOnly</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldStartIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">               </span><span style="color:#6A737D;">// oldChildren开始索引</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldEndIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// oldChildren结束索引</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]        </span><span style="color:#6A737D;">// oldChildren中所有未处理节点中的第一个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[oldEndIdx]   </span><span style="color:#6A737D;">// oldChildren中所有未处理节点中的最后一个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newStartIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">               </span><span style="color:#6A737D;">// newChildren开始索引</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newEndIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// newChildren结束索引</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]        </span><span style="color:#6A737D;">// newChildren中所有未处理节点中的第一个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[newEndIdx]  </span><span style="color:#6A737D;">// newChildren中所有未处理节点中的最后一个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// to ensure removed elements stay in correct relative positions</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// during leaving transitions</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">canMove</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">removeOnly</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">checkDuplicateKeys</span><span style="color:#24292E;">(newCh)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (oldStartIdx </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> oldEndIdx </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> newStartIdx </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(oldStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">        oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx] </span><span style="color:#6A737D;">// 如果oldStartVnode不存在，则直接跳过，比对下一个</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(oldEndVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">        oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果新前与旧前节点相同，就把两个节点进行patch更新</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldStartVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">        oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">        newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldEndVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果新后与旧后节点相同，就把两个节点进行patch更新</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldEndVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">        oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">        newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">newEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldStartVnode, newEndVnode)) { </span><span style="color:#6A737D;">// Vnode moved right</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果新后与旧前节点相同，先把两个节点进行patch更新，然后把旧前节点移动到oldChilren中所有未处理节点之后</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldStartVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">        canMove </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nodeOps.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(parentElm, oldStartVnode.elm, nodeOps.</span><span style="color:#6F42C1;">nextSibling</span><span style="color:#24292E;">(oldEndVnode.elm))</span></span>
<span class="line"><span style="color:#24292E;">        oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">        newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">newEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldEndVnode, newStartVnode)) { </span><span style="color:#6A737D;">// Vnode moved left</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果新前与旧后节点相同，先把两个节点进行patch更新，然后把旧后节点移动到oldChilren中所有未处理节点之前</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldEndVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">        canMove </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nodeOps.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">        oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">        newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不属于以上四种情况，就进行常规的循环比对patch</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(oldKeyToIdx)) oldKeyToIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createKeyToOldIdx</span><span style="color:#24292E;">(oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#24292E;">        idxInOld </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(newStartVnode.key)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> oldKeyToIdx[newStartVnode.key]</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findIdxInOld</span><span style="color:#24292E;">(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果在oldChildren里找不到当前循环的newChildren里的子节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(idxInOld)) { </span><span style="color:#6A737D;">// New element</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 新增节点并插入到合适位置</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">createElm</span><span style="color:#24292E;">(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, newCh, newStartIdx)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 如果在oldChildren里找到了当前循环的newChildren里的子节点</span></span>
<span class="line"><span style="color:#24292E;">          vnodeToMove </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[idxInOld]</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 如果两个节点相同</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(vnodeToMove, newStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 调用patchVnode更新节点</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(vnodeToMove, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">            oldCh[idxInOld] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动</span></span>
<span class="line"><span style="color:#24292E;">            canMove </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nodeOps.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// same key but different element. treat as new element</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">createElm</span><span style="color:#24292E;">(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, newCh, newStartIdx)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldStartIdx </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> oldEndIdx) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 如果oldChildren比newChildren先循环完毕，</span></span>
<span class="line"><span style="color:#6A737D;">       * 那么newChildren里面剩余的节点都是需要新增的节点，</span></span>
<span class="line"><span style="color:#6A737D;">       * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      refElm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(newCh[newEndIdx </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> newCh[newEndIdx </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].elm</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addVnodes</span><span style="color:#24292E;">(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newStartIdx </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 如果newChildren比oldChildren先循环完毕，</span></span>
<span class="line"><span style="color:#6A737D;">       * 那么oldChildren里面剩余的节点都是需要删除的节点，</span></span>
<span class="line"><span style="color:#6A737D;">       * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">removeVnodes</span><span style="color:#24292E;">(parentElm, oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br></div></div><p>读源码之前，我们先有这样一个概念：那就是在我们前面所说的优化策略中，节点有可能是从前面对比，也有可能是从后面对比，对比成功就会进行更新处理，也就是说我们有可能处理第一个，也有可能处理最后一个，那么我们在循环的时候就不能简单从前往后或从后往前循环，而是要从两边向中间循环。</p><p>那么该如何从两边向中间循环呢？请看下图： <img src="`+y+`" alt=""></p><p>首先，我们先准备4个变量：</p><ul><li><strong>newStartIdx:</strong><code>newChildren</code>数组里开始位置的下标；</li><li><strong>newEndIdx:</strong><code>newChildren</code>数组里结束位置的下标；</li><li><strong>oldStartIdx:</strong><code>oldChildren</code>数组里开始位置的下标；</li><li><strong>oldEndIdx:</strong><code>oldChildren</code>数组里结束位置的下标；</li></ul><p>在循环的时候，每处理一个节点，就将下标向图中箭头所指的方向移动一个位置，开始位置所表示的节点被处理后，就向后移动一个位置；结束位置所表示的节点被处理后，就向前移动一个位置；由于我们的优化策略都是新旧节点两两更新的，所以一次更新将会移动两个节点。说的再直白一点就是：<code>newStartIdx</code>和<code>oldStartIdx</code>只能往后移动（只会加），<code>newEndIdx</code>和<code>oldEndIdx</code>只能往前移动（只会减）。</p><p>当开始位置大于结束位置时，表示所有节点都已经遍历过了。</p><p>OK，有了这个概念后，我们开始读源码：</p><ol><li><p>如果<code>oldStartVnode</code>不存在，则直接跳过，将<code>oldStartIdx</code>加1，比对下一个</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (oldStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> oldEndIdx </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> newStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(oldStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (oldStartIdx </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> oldEndIdx </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> newStartIdx </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(oldStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">   oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>如果<code>oldEndVnode</code>不存在，则直接跳过，将<code>oldEndIdx</code>减1，比对前一个</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(oldEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(oldEndVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">    oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>如果新前与旧前节点相同，就把两个节点进行<code>patch</code>更新，同时<code>oldStartIdx</code>和<code>newStartIdx</code>都加1，后移一个位置</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">    newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldStartVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">    oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">    newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>如果新后与旧后节点相同，就把两个节点进行<code>patch</code>更新，同时<code>oldEndIdx</code>和<code>newEndIdx</code>都减1，前移一个位置</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">    newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldEndVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldEndVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">    oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">    newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">newEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>如果新后与旧前节点相同，先把两个节点进行<code>patch</code>更新，然后把旧前节点移动到<code>oldChilren</code>中所有未处理节点之后，最后把<code>oldStartIdx</code>加1，后移一个位置，<code>newEndIdx</code>减1，前移一个位置</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">    canMove </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(parentElm, oldStartVnode.elm, nodeOps.</span><span style="color:#B392F0;">nextSibling</span><span style="color:#E1E4E8;">(oldEndVnode.elm))</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">    newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldStartVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldStartVnode, newEndVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">    canMove </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nodeOps.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(parentElm, oldStartVnode.elm, nodeOps.</span><span style="color:#6F42C1;">nextSibling</span><span style="color:#24292E;">(oldEndVnode.elm))</span></span>
<span class="line"><span style="color:#24292E;">    oldStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">oldStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">    newEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">newEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>如果新前与旧后节点相同，先把两个节点进行<code>patch</code>更新，然后把旧后节点移动到<code>oldChilren</code>中所有未处理节点之前，最后把<code>newStartIdx</code>加1，后移一个位置，<code>oldEndIdx</code>减1，前移一个位置</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode)) { </span><span style="color:#6A737D;">// Vnode moved left</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">    canMove </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">    newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">sameVnode</span><span style="color:#24292E;">(oldEndVnode, newStartVnode)) { </span><span style="color:#6A737D;">// Vnode moved left</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">patchVnode</span><span style="color:#24292E;">(oldEndVnode, newStartVnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">    canMove </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nodeOps.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span></span>
<span class="line"><span style="color:#24292E;">    oldEndVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCh[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">oldEndIdx]</span></span>
<span class="line"><span style="color:#24292E;">    newStartVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCh[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">newStartIdx]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>如果不属于以上四种情况，就进行常规的循环比对<code>patch</code></p></li><li><p>如果在循环中，<code>oldStartIdx</code>大于<code>oldEndIdx</code>了，那就表示<code>oldChildren</code>比<code>newChildren</code>先循环完毕，那么<code>newChildren</code>里面剩余的节点都是需要新增的节点，把<code>[newStartIdx, newEndIdx]</code>之间的所有节点都插入到<code>DOM</code>中</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldStartIdx </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> oldEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    refElm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(newCh[newEndIdx </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> newCh[newEndIdx </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].elm</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addVnodes</span><span style="color:#E1E4E8;">(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldStartIdx </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> oldEndIdx) {</span></span>
<span class="line"><span style="color:#24292E;">    refElm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(newCh[newEndIdx </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> newCh[newEndIdx </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].elm</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addVnodes</span><span style="color:#24292E;">(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>如果在循环中，<code>newStartIdx</code>大于<code>newEndIdx</code>了，那就表示<code>newChildren</code>比<code>oldChildren</code>先循环完毕，那么<code>oldChildren</code>里面剩余的节点都是需要删除的节点，把<code>[oldStartIdx, oldEndIdx]</code>之间的所有节点都删除</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newStartIdx </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeVnodes</span><span style="color:#E1E4E8;">(parentElm, oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newStartIdx </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeVnodes</span><span style="color:#24292E;">(parentElm, oldCh, oldStartIdx, oldEndIdx)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p>OK,处理完毕，可见源码中的处理逻辑跟我们之前分析的逻辑是一样的。</p><h2 id="_8-总结" tabindex="-1">8. 总结 <a class="header-anchor" href="#_8-总结" aria-label="Permalink to &quot;8. 总结&quot;">​</a></h2><p>本篇文章中，我们介绍了<code>Vue</code>中子节点更新的优化策略，发现<code>Vue</code>为了避免双重循环数据量大时间复杂度升高带来的性能问题，而选择了从子节点数组中的4个特殊位置互相比对，分别是：新前与旧前，新后与旧后，新后与旧前，新前与旧后。对于每一种情况我们都通过图文的形式对其逻辑进行了分析。最后我们回到源码，通过阅读源码来验证我们分析的是否正确。幸运的是我们之前每一步的分析都在源码中找到了相应的实现，得以验证我们的分析没有错。以上就是<code>Vue</code>中的<code>patch</code>过程，即<code>DOM-Diff</code>算法所有内容了，到这里相信你再读这部分源码的时候就有比较清晰的思路了。</p>`,47),u=[h];function b(m,C,F,V,w,D){return n(),a("div",null,u)}const I=s(i,[["render",b]]);export{x as __pageData,I as default};
